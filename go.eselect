# Copyright 2023 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# vim: set ft=sh:

DESCRIPTION="Manage Golang symlinks"
MAINTAINER="i@bitbili.net"
VERSION="20230204"

bindir=/usr/bin
libdir=/usr/lib

find_targets() {
	for t in $(ls -1v ${EROOT}${bindir}/go1.*) ; do
		[[ -x $t ]] && basename "$t"
	done
}

check_target() {
	local target=${1} targets
	targets=( $(find_targets ) )

	# number from the list
	if is_number ${target} && [[ ${target} -ge 1 ]] ; then
		local t=${targets[$((${target} - 1 ))]}
		if [[ ${target} -gt ${#targets[@]} ]] ; then
			target="invalid"
		elif [[ -e "$bindir"/"$t" ]] ; then
			target=$t
		else
			write_warning_msg $t
			target="invalid"
		fi
	# `goX.XX' string
	elif ! [[ -e "${EROOT}${bindir}/${target}" ]]; then
			target="invalid"
	fi

	echo -n ${target}
}

remove_symlinks() {
	local f
	for f in ${EROOT}${bindir}/{go,gofmt} ${EROOT}${libdir}/go; do
		if [[ -L "$f" ]]; then
			rm -r "$f"
		elif ! [[ -e "$f" ]]; then
			:
		else
			write_warning_msg "'$f' is not a symlink, skip removing it."
		fi
	done
}

set_symlinks() {
	local target=${1} version

	version=${target#go}

	local binPath="${EROOT}${bindir}/"
	local libPath="${EROOT}${libdir}/"

	# these have to work
	for f in go gofmt; do
		ln -s "${f}${version}" "${binPath}${f}" || \
			die "Could not set ${f} bin symlink"
	done
	ln -s "go${version}" "${libPath}go" || \
		die "Could not set the go lib symlink"

	write_list_start "Successfully switched to version:"
	write_kv_list_entry "${target}" ""
}

### show action ###
describe_show() {
	echo "Prints the current configuration."
}

do_show() {
	[[ -z "${@}" ]] || die -q "This function does not expect any arguments"

	local go=""

	write_list_start "Current Go version:"
	if [[ -L "${EROOT}${bindir}/go" ]] ; then
		go=$(basename $(readlink ${EROOT}${bindir}/go ) )
		write_kv_list_entry $go ""
	elif [[ -e "${EROOT}${bindir}/go" ]] ; then
		write_warning_msg "${bindir}/go is a SLOT incompatible version."
		write_kv_list_entry "$(basename $(readlink ${EROOT}${bindir}/go ) )" ""
	else
		write_kv_list_entry "(none)"
		return 1
	fi
}

### list action ###
describe_list() {
	echo "Lists available Go versions."
}

do_list() {
	write_list_start "Available Go versions:"
	local targets=( $(find_targets) )
	local i line

	for (( i = 0; i < ${#targets[@]}; i++ )) ; do
		line="${targets[i]}"

		# find out the current version
		if [[ ${targets[i]} = $(basename $(readlink "${EROOT}${bindir}/go")) ]] ; then
			targets[i]=$(highlight_marker "${line}")
		else
			targets[i]=${line}
		fi
	done
	write_numbered_list -m "(none found)" "${targets[@]}"
}

### set action ###
describe_set() {
	echo "Switches to a Go version."
}

describe_set_options() {
	echo "target : Target name or number (from 'list' action)"
}

describe_set_parameters() {
	echo "<target>"
}

do_set() {
	[[ -z ${@} ]] && die -q "Parameter expected."

	local target=$(check_target ${1})

	[[ $target = "invalid" ]] && die -q "Can't use that version. No suitable Go binary found."

	remove_symlinks || \
		die "Could not remove symlinks"

	set_symlinks ${target}
}

### cleanup action ###
describe_cleanup() {
	echo "This action is not to be called manually."
}

do_cleanup() {
	[[ -z ${@} ]] || die -q "This function does not expect any arguments"

	# Do we need to clean up?
	if [[ -e "${EROOT}${bindir}"/$(readlink "${EROOT}${bindir}/go") ]]; then
		echo "Nothing to clean up."
		return
	fi

	local targets=( $(find_targets) )

	remove_symlinks || \
		die -q "Could not remove symlinks"

	if [[ ${#targets[@]} -ne 0 ]] ; then
		echo "Marking the latest still installed version as default..."
		set_symlinks ${targets[@]: -1}
	else
		echo "No Go binary left on the system. Stale symlinks removed."
	fi
}
